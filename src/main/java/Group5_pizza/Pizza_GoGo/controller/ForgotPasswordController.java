package Group5_pizza.Pizza_GoGo.controller;

import java.util.UUID;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import Group5_pizza.Pizza_GoGo.model.Account;
import Group5_pizza.Pizza_GoGo.service.AccountService;
import Group5_pizza.Pizza_GoGo.service.MailService;
import Group5_pizza.Pizza_GoGo.service.TokenCacheService;
import lombok.RequiredArgsConstructor;

@Controller
@RequiredArgsConstructor
public class ForgotPasswordController {

    private final AccountService accountService;
    private final MailService emailService;
    private final TokenCacheService tokenCacheService; // D√πng Redis cache

    // Hi·ªÉn th·ªã form qu√™n m·∫≠t kh·∫©u
    @GetMapping("/forgot-password")
    public String showForgotPasswordForm() {
        return "forgot/forgot-password"; // n·∫±m trong folder forgot/
    }

    // X·ª≠ l√Ω g·ª≠i mail reset password
    @PostMapping("/forgot-password")
    public String processForgotPassword(@RequestParam("email") String email,
                                        RedirectAttributes redirectAttributes) {
        Account account = accountService.findByEmail(email);
        if (account == null) {
            redirectAttributes.addFlashAttribute("error", "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi email n√†y!");
            return "redirect:/forgot-password";
        }

        // T·∫°o token v√† l∆∞u v√†o Redis
        String token = UUID.randomUUID().toString();
        tokenCacheService.saveToken(token, account.getUsername());

        String resetLink = "http://localhost:8080/reset-password?token=" + token;
        String subject = "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u Pizza GoGo üçï";
        String body = "<p>Xin ch√†o,</p>"
                + "<p>B·∫°n v·ª´a y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u. Nh·∫•n v√†o link b√™n d∆∞·ªõi ƒë·ªÉ ti·∫øp t·ª•c:</p>"
                + "<p><a href=\"" + resetLink + "\">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</a></p>"
                + "<p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu, vui l√≤ng b·ªè qua email n√†y.</p>";

        emailService.sendMail(email, subject, body);

        redirectAttributes.addFlashAttribute("success", "Link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i qua email!");
        return "redirect:/forgot-password";
    }

    // Hi·ªÉn th·ªã form nh·∫≠p m·∫≠t kh·∫©u m·ªõi
    @GetMapping("/reset-password")
    public String showResetPasswordForm(@RequestParam("token") String token, Model model) {
        String username = tokenCacheService.getUsernameByToken(token);
        if (username == null) {
            model.addAttribute("error", "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!");
            return "forgot/reset-password"; // view trong folder forgot/
        }

        model.addAttribute("token", token);
        return "forgot/reset-password";
    }

    // X·ª≠ l√Ω ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi
    @PostMapping("/reset-password")
    public String processResetPassword(@RequestParam("token") String token,
                                       @RequestParam("password") String newPassword,
                                       RedirectAttributes redirectAttributes) {

        String username = tokenCacheService.getUsernameByToken(token);
        if (username == null) {
            redirectAttributes.addFlashAttribute("error", "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!");
            return "redirect:/reset-password?token=" + token;
        }

        boolean result = accountService.resetPassword(username, newPassword);
        if (result) {
            tokenCacheService.deleteToken(token); // X√≥a token sau khi d√πng
            redirectAttributes.addFlashAttribute("success", "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng! H√£y ƒëƒÉng nh·∫≠p l·∫°i.");
            return "redirect:/login";
        } else {
            redirectAttributes.addFlashAttribute("error", "L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u. Vui l√≤ng th·ª≠ l·∫°i!");
            return "redirect:/reset-password?token=" + token;
        }
    }
}